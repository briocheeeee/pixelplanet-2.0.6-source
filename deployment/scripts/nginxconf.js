const asns = [
  14618,
  210558,
  210107,
  29632,
  16276,
  24940,
  14061,
  213230,
  208626,
  30399,
  16509,
  44901,
  13306,
  216271,
  36832,
  47272,
  51396,
];

const firewallBlockRanges = [
  '142.44.128.0/17',
  '194.167.0.0/16',
  '2400:8901::/64',
  '2600:3c03::/64',
  '2600:3c04::/64',
  '2607:5300:203:14ae::/64',
  '2a01:4ff:f0:3004::/64',
  '2a02:27b0:4d03:c9d0::/64',
  '51.161.0.0/17',
  '51.161.128.0/17',
  '51.178.0.0/16',
  '45.9.88.0/22',
  '75.127.7.192/27',
  '2a01:cb04:60f:2900::/64',
  '2a0d:6fc2:54c0:7500::/64',
  '2603:7080:fe3e:1700::/64',
  '2001:4c4e:1824:4100::/64',
  '2a06:1287::/32',
  '46.34.62.0/24',
];

const firewallBlockIPs = [
  '102.129.143.86',
  '107.175.73.54',
  '107.179.20.204',
  '109.175.107.110',
  '109.95.217.242',
  '114.232.194.255',
  '115.226.153.176',
  '116.202.22.43',
  '119.74.167.169',
  '122.252.253.100',
  '131.153.26.188',
  '131.153.26.189',
  '138.3.244.208',
  '146.70.52.46',
  '154.16.192.176',
  '172.107.240.26',
  '176.115.102.106',
  '176.215.80.25',
  '176.36.75.28',
  '178.163.117.211',
  '178.20.142.170',
  '178.72.81.231',
  '181.119.30.41',
  '185.177.124.224',
  '185.26.63.16',
  '188.132.139.129',
  '188.3.187.228',
  '190.11.138.163',
  '190.49.124.184',
  '191.101.31.95',
  '191.96.150.204',
  '192.142.16.11',
  '194.182.67.126',
  '194.87.239.144',
  '212.237.228.220',
  '212.237.228.225',
  '213.227.154.74',
  '31.210.107.199',
  '34.245.86.143',
  '34.66.88.30',
  '34.71.79.206',
  '34.82.153.53',
  '37.188.11.119',
  '37.212.64.134',
  '45.189.115.205',
  '46.246.41.153',
  '46.246.41.158',
  '5.142.42.184',
  '5.173.137.17',
  '5.173.172.228',
  '52.143.155.67',
  '52.205.26.222',
  '5.227.29.33',
  '5.227.31.1',
  '62.244.51.28',
  '77.47.170.231',
  '78.132.55.22',
  '78.36.107.187',
  '78.86.5.152',
  '79.45.161.163',
  '80.169.156.52',
  '81.92.203.83',
  '82.193.110.12',
  '84.124.251.104',
  '84.17.43.24',
  '84.17.56.184',
  '84.239.40.225',
  '85.76.77.85',
  '86.138.152.227',
  '86.186.250.150',
  '87.7.200.139',
  '89.108.99.115',
  '89.40.143.192',
  '91.121.210.56',
  '91.228.236.175',
  '92.32.69.242',
  '93.115.28.181',
  '95.181.236.133',
  '85.98.55.199',
  '67.255.77.34',
  '188.23.51.246',
  '78.174.247.162',
  '95.76.46.200',
  '88.231.207.77',
  '151.135.28.236',
  '176.231.133.107',
  '80.121.26.216',
  '88.237.43.71',
  '213.109.202.66',
  '95.25.61.218',
  '176.231.133.243',
  '77.137.79.139',
  '178.34.55.56',
  '138.204.210.102',
  '111.225.153.238',
  '202.65.171.67',
  '103.168.254.46',
  '203.174.15.83',
  '188.124.17.39',
  '88.238.8.233',
  '97.117.90.8',
  '95.24.104.84',
  '78.110.195.241',
  '209.126.124.140',
  '78.110.195.130',
  '146.148.109.93',
  '203.85.120.69',
  '185.159.111.149',
  '89.232.176.21',
  '78.110.195.129',
  '185.236.229.14',
  '45.146.185.220',
  '186.234.124.127',
  '35.213.89.8',
  '103.152.254.152',
  '207.248.102.4',
  '138.117.85.254',
  '62.14.234.232',
  '181.112.225.101',
  '47.184.183.194',
  '5.58.49.161',
];

const nginxBlock = [
  '34.64.0.0/10',
  '34.128.0.0/10',
  '34.132.0.0/14',
  '35.184.0.0/13',
  '35.192.0.0/12',
  '66.102.0.0/20',
  '72.55.128.0/18',
  '74.125.0.0/16',
  '84.239.14.0/24',
  '84.239.49.0/24',
  '104.154.0.0/15',
  '104.196.0.0/14',
  '119.59.121.0/24',
  '130.211.0.0/16',
  '168.149.128.0/18',
  '173.255.112.0/20',
  '185.245.26.0/23',
  '194.26.192.0/24',
  '194.71.130.0/24',
  '204.16.240.0/21',
  '217.21.55.0/24',
  '31.130.200.0/21',
  '93.125.114.0/24',
  '131.153.0.0/17',
  '2a07:d847::/32',
  '2a0f:c943::/32',
  '2a02:6b8:c08::/48',
  '2a0a:fa40::/29',
  '200.235.0.0/17',
  '85.100.70.0/23',
  '85.99.178.0/23',
  '159.146.26.0/23',
  '103.108.94.130',
  '104.223.100.81',
  '109.236.81.170',
  '141.95.54.180',
  '146.0.86.196',
  '169.150.196.109',
  '178.17.170.189',
  '178.20.142.170',
  '185.107.56.163',
  '185.231.207.118',
  '185.43.191.203',
  '185.72.247.151',
  '199.244.49.79',
  '2a01:36d:1400:28d2:bd93:65a6:5e31:e322',
  '2a09:bac1:7540:48::84:6d',
  '31.192.105.104',
  '31.222.253.215',
  '31.223.105.113',
  '37.120.156.234',
  '37.63.9.104',
  '37.78.224.175',
  '45.132.194.16',
  '46.166.182.34',
  '46.166.182.57',
  '5.173.158.92',
  '5.173.172.228',
  '5.180.128.110',
  '83.71.204.117',
  '85.100.66.238',
  '85.110.146.67',
  '86.120.52.125',
  '86.124.56.51',
  '88.134.42.187',
  '89.43.30.38',
  '91.219.238.174',
  '93.115.28.181',
  '94.110.186.197',
  '99.224.5.31',
  '141.94.31.178',
  '146.70.52.247',
  '95.10.128.0/17',
  '31.155.132.0/22',
  '187.183.45.73',
  '89.187.171.226',
  '149.34.244.177',
  '95.46.76.0/24',
  '5.173.0.0/17',
];

const nginxWhitelist = [
  '178.158.0.0/17',
  '91.200.160.0/22',
  '92.118.132.0/24',
  '195.189.44.0/22',
  '185.71.80.0/22',
  '195.209.151.0/24',
  '213.59.160.0/20',
  '62.76.12.0/24',
  '195.16.78.61/32',
  '176.109.176.0/20',
  '94.158.32.0/20',
  '176.109.224.0/19',
  '185.33.140.0/22',
  '193.192.36.0/23',
  '194.246.92.0/22',
  '31.128.76.0/24',
  '46.98.122.4',
];

(async () => {
  let cidrs4 = [];
  let cidrs6 = [];

  for (const asn of asns) {
    try {
      const resp = await fetch(`https://ip.guide/as${asn}`);
      const data = await resp.json();

      let my4 = [];
      let my6 = [];

      let v4Filter = 32;
      let v6Filter = 128;
      let maxResults = 200;
      const amount = data.routes.v4.length + data.routes.v6.length;
      if (amount > 2000) {
        v4Filter = 16;
        v6Filter = 44;
        maxResults = 2000;
      }

      data.routes.v4.forEach((r) => {
        const mask = r.substring(r.lastIndexOf('/') + 1);
        if (mask <= v4Filter) {
          my4.push(r);
        }
      });

      data.routes.v6.forEach((r) => {
        const mask = r.substring(r.lastIndexOf('/') + 1);
        if (mask <= v6Filter) {
          my6.push(r);
        }
      });

      if (my4.length > maxResults) {
        my4 = my4.sort((a, b) => {
          const maskA = a.substring(a.lastIndexOf('/') + 1);
          const maskB = b.substring(b.lastIndexOf('/') + 1);
          return maskA - maskB;
        }).slice(0, maxResults);
      }
      if (my6.length > maxResults) {
        my6 = my6.sort((a, b) => {
          const maskA = a.substring(a.lastIndexOf('/') + 1);
          const maskB = b.substring(b.lastIndexOf('/') + 1);
          return maskA - maskB;
        }).slice(0, maxResults);
      }

      cidrs4 = cidrs4.concat(my4);
      cidrs6 = cidrs6.concat(my4);
    } catch {
      // nothing
    }
  }

  console.log('geo $allow_ws {');
  console.log('  default  0;');
  nginxWhitelist.forEach((i) => console.log(`  ${i}  1;`));
  console.log('}');

  console.log('\ngeo $deny_ws {');
  console.log('  default  0;');
  nginxBlock.forEach((i) => console.log(`  ${i}  1;`));
  firewallBlockIPs.forEach((i) => console.log(`  ${i}  1;`));
  firewallBlockRanges.forEach((i) => console.log(`  ${i}  1;`));
  cidrs4.forEach((i) => console.log(`  ${i}  1;`));
  cidrs6.forEach((i) => console.log(`  ${i}  1;`));
  console.log('}');

  let resp4 = await fetch('https://www.cloudflare.com/ips-v4');
  resp4 = await resp4.text();
  console.log('\n#Cloudflare realip\n#- IPv4');
  resp4.split('\n').forEach((l) => {
    console.log(`set_real_ip_from ${l};`);
  });
  console.log('# - IPv6');
  let resp6 = await fetch('https://www.cloudflare.com/ips-v6');
  resp6 = await resp6.text();
  resp6.split('\n').forEach((l) => {
    console.log(`set_real_ip_from ${l};`);
  });
  console.log('');
  console.log('real_ip_header CF-Connecting-IP;');
  console.log('real_ip_recursive on;');
  console.log(`
map $http_x_forwarded_proto $proxy_x_forwarded_proto {
  default $http_x_forwarded_proto;
  ""      $scheme;
}`);
  console.log('\n# Find out if we go through clouflare');
  console.log('geo $realip_remote_addr $cloudflare_ip {');
  console.log('  default  0;');
  resp4.split('\n').forEach((l) => {
    console.log(`  ${l} 1;`);
  });
  resp6.split('\n').forEach((l) => {
    console.log(`  ${l} 1;`);
  });
  console.log('}');
})();
